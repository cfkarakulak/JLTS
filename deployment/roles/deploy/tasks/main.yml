---

- name: "Create latest build dir variable"
  set_fact:
    LATEST_BUILD_DIR: "{{ ALL_BUILDS_DIR }}/{{ tag }}"

- name: "Create build directory"
  file:
    path: "{{ LATEST_BUILD_DIR }}"
    state: directory
    mode: 0755

- name: "Rsync repository content to latest build directory"
  synchronize:
    src: "{{ PROJECT_SOURCE }}"
    dest: "{{ LATEST_BUILD_DIR }}"

- stat: path={{ CURRENT_RELEASE_DIR }}
  register: link

- debug: msg="Current release symlink exists"
  when: link.stat.islnk is defined and link.stat.islnk

- name: "Create checksum from current requirements.txt file"
  shell: md5sum {{ CURRENT_RELEASE_DIR }}/src/requirements.txt | awk '{print $1}' > {{ PROJECT_ROOT }}/requirements.old.checksum
  when: link.stat.islnk is defined and link.stat.islnk

- name: "Create checksum from new build requirements.txt file"
  shell: md5sum {{ LATEST_BUILD_DIR }}/src/requirements.txt | awk '{print $1}' > {{ PROJECT_ROOT }}/requirements.new.checksum
  when: link.stat.islnk is defined and link.stat.islnk

- name: "Check for checksum changes"
  shell: diff {{ PROJECT_ROOT }}/requirements.old.checksum {{ PROJECT_ROOT }}/requirements.new.checksum
  register: reqdiff
  when: link.stat.islnk is defined and link.stat.islnk
  ignore_errors: yes

- debug: msg="Changes detected"
  when: reqdiff.rc is defined and reqdiff.rc == 1

- name: "Create build virtualenv"
  command: python3.8 -m venv {{ LATEST_BUILD_DIR }}/env

- name: "Pip wheel requirements"
  command: python3.8 -m pip wheel --wheel-dir={{ PROJECT_ROOT }}/wheels -r {{ LATEST_BUILD_DIR }}/src/requirements.txt
  when: reqdiff.rc is not defined or (reqdiff.rc is defined and reqdiff.rc == 1)

- name: "Install requirements for the latest build"
  pip:
    requirements: "{{ LATEST_BUILD_DIR }}/src/requirements.txt"
    virtualenv: "{{ LATEST_BUILD_DIR }}/env"
    extra_args: "--no-index --find-links={{ PROJECT_ROOT }}/wheels"

- name: "Update current release symlink"
  file:
    state: link
    force: yes
    path: "{{ CURRENT_RELEASE_DIR }}"
    src: "{{ LATEST_BUILD_DIR }}"

# - name: "Reload UWSGI"
#   supervisorctl:
#     name: "uwsgi"
#     state: restarted

- name: "Cleanup old releases"
  shell: ls -1dt {{ ALL_BUILDS_DIR }}/* | tail -n +{{ STORE_X_BUILDS | int + 2 }} | xargs rm -rf
  when: STORE_X_BUILDS > 0
